//@version=5
indicator("SnagProfit Logic 15M 1H", overlay = true)


stockschart = syminfo.type == 'stock'
futureschart = syminfo.type == 'futures'
indexchart = syminfo.type == 'index'
// // --------- This ensures that no plots from lower time frames will be plotted on higher time frames.
// ————— Converts current chart resolution into a float minutes value.
f_resInMinutes() =>
    if stockschart or futureschart or indexchart
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 16 : timeframe.isweekly ? 60. * 7 * 5 : timeframe.ismonthly ? 60. * 7 * 21 : na)
        _resInMinutes
    else
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)
        _resInMinutes
// ————— Returns the float minutes value of the string _res.
f_tfResInMinutes(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    // Dependency: f_resInMinutes().
    request.security(syminfo.tickerid, _res, f_resInMinutes())

f_tfSources(_res, _source) =>
    request.security(syminfo.tickerid, _res, _source)

f_tfUp(_TF_High, _TF_Vol, _TF_VolMA) =>
    _TF_High[3] > _TF_High[4] and _TF_High[4] > _TF_High[5] and _TF_High[2] < _TF_High[3] and _TF_High[1] < _TF_High[2] and _TF_Vol[3] > _TF_VolMA[3]

f_tfDown(_TF_Low, _TF_Vol, _TF_VolMA) =>
    _TF_Low[3] < _TF_Low[4] and _TF_Low[4] < _TF_Low[5] and _TF_Low[2] > _TF_Low[3] and _TF_Low[1] > _TF_Low[2] and _TF_Vol[3] > _TF_VolMA[3]

f_RoundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor
    
f_nDecimals(_in) =>
    n  = int(na), s = str.tostring(_in), p = str.pos(s, ".")
    n := na(str.tonumber(s)) ? int(na) : na(p) ? 0 :
     str.length(str.substring(s, p + 1))

_n = f_nDecimals(close)

var string GP2 = "Display"
string  i_tableYpos = input.string("top", "Panel position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input.string("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
color   i_c_buy    = input.color(color.new(color.green, 30), "Buy", inline = "12", group = GP2)
color   i_c_sell    = input.color(color.new(color.red, 10), "Sell", inline = "12", group = GP2)
color   i_c_neutral = input.color(color.new(color.gray, 30), "Neutral", inline = "12", group = GP2)


var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 6, 10)
if barstate.islast
    // Table header.
    table.cell(panel, 0, 1, "TF", bgcolor = i_c_neutral, text_color=color.white, width=4)
    table.cell(panel, 1, 1, "TYPE", bgcolor = i_c_neutral, text_color=color.white, width=4)
    table.cell(panel, 2, 1, "RSI", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 3, 1, "S", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 4, 1, "R", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 5, 1, "%V", bgcolor = i_c_neutral, text_color=color.white, width=6)
    
//15m
tf15m = '15'
tf15m_InMinutes = f_tfResInMinutes(tf15m)
currentTFInMinutes = f_resInMinutes()
chartOnLower_tf15m = currentTFInMinutes <= tf15m_InMinutes

tf15m_inH = str.tostring(tf15m_InMinutes / 60)
tf15m_text = if stockschart or futureschart
    tf15m_InMinutes >= 60 and tf15m_InMinutes < 960 ? tf15m_inH + 'h' : tf15m_InMinutes < 60 ? tf15m + 'm' : tf15m
else
    tf15m_InMinutes >= 60 and tf15m_InMinutes < 1440 ? tf15m_inH + 'h' : tf15m_InMinutes < 60 ? tf15m + 'm' : tf15m

barsin_tf15m = tf15m_InMinutes / currentTFInMinutes

tf15m_bar_index = math.ceil(1 * barsin_tf15m)

tf15m_bar_index_range = math.ceil(3 * barsin_tf15m)

var int tf15m_High_index = na
var int tf15m_Low_index = na

if tf15m_bar_index + tf15m_bar_index_range > 4999
    tf15m_High_index := 4999
    tf15m_Low_index := 4999
else
    tf15m_High_index :=  math.abs(ta.highestbars(high, nz(tf15m_bar_index_range, 1)))[tf15m_bar_index] + tf15m_bar_index
    tf15m_Low_index := math.abs(ta.lowestbars(low, nz(tf15m_bar_index_range, 1)))[tf15m_bar_index] + tf15m_bar_index


// S/R  = Time Frame 1 = tf15m
tf15m_Vol = f_tfSources(tf15m, volume)
tf15m_VolMA = ta.sma(tf15m_Vol, 5)
tf15m_High = f_tfSources(tf15m, high)
tf15m_Low = f_tfSources(tf15m, low)
tf15m_Open = f_tfSources(tf15m, open)
tf15m_Close = f_tfSources(tf15m, close)

tf15m_Up = f_tfUp(tf15m_High, tf15m_Vol, tf15m_VolMA)
tf15m_Down = f_tfDown(tf15m_Low, tf15m_Vol, tf15m_VolMA)

tf15m_CalcFractalUp() =>
    tf15m_FractalUp = 0.0
    tf15m_FractalUp := tf15m_Up ? tf15m_High[3] : tf15m_FractalUp[1]
    tf15m_FractalUp

tf15m_CalcFractalDown() =>
    tf15m_FractalDown = 0.0
    tf15m_FractalDown := tf15m_Down ? tf15m_Low[3] : tf15m_FractalDown[1]
    tf15m_FractalDown

tf15m_CalcFractalUpZone() =>
    tf15m_FractalUpZone = 0.0
    tf15m_FractalUpZone := tf15m_Up and tf15m_Close[3] >= tf15m_Open[3] ? tf15m_Close[3] : tf15m_Up and tf15m_Close[3] < tf15m_Open[3] ? tf15m_Open[3] : tf15m_FractalUpZone[1]
    tf15m_FractalUpZone

tf15m_CalcFractalDownZone() =>
    tf15m_FractalDownZone = 0.0
    tf15m_FractalDownZone := tf15m_Down and tf15m_Close[3] >= tf15m_Open[3] ? tf15m_Open[3] : tf15m_Down and tf15m_Close[3] < tf15m_Open[3] ? tf15m_Close[3] : tf15m_FractalDownZone[1]
    tf15m_FractalDownZone

tf15m_ResistanceUp = request.security(syminfo.tickerid, tf15m, tf15m_CalcFractalUp())
tf15m_ResistanceZone = request.security(syminfo.tickerid, tf15m, tf15m_CalcFractalUpZone())

tf15m_SupportDown = request.security(syminfo.tickerid, tf15m, tf15m_CalcFractalDown())
tf15m_SupportZone = request.security(syminfo.tickerid, tf15m, tf15m_CalcFractalDownZone())


ema_15m_5 = ta.ema(close, 5)
ema15m_5 = request.security(syminfo.tickerid, tf15m, ema_15m_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_15m_10 = ta.ema(close, 10)
ema15m_10 = request.security(syminfo.tickerid, tf15m, ema_15m_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_15m_20 = ta.ema(close, 20)
ema15m_20 = request.security(syminfo.tickerid, tf15m, ema_15m_20, barmerge.gaps_off, barmerge.lookahead_on)
rsi_15m = ta.rsi(close, 14)
rsi15m = request.security(syminfo.tickerid, tf15m, rsi_15m, barmerge.gaps_off, barmerge.lookahead_on)
vol15m = request.security(syminfo.tickerid, tf15m, volume, barmerge.gaps_off, barmerge.lookahead_on)
vol15m_change = f_RoundUp((vol15m[0] - vol15m[1])/vol15m[1]*100, 2)
txt_color_15m = vol15m_change > 0 ? color.white : color.yellow

sup15m = f_RoundUp((tf15m_SupportDown[0] + tf15m_SupportZone[0])/2, _n)
res15m = f_RoundUp((tf15m_ResistanceUp[0] + tf15m_ResistanceZone[0])/2, _n)

can_buy_15m = ema15m_5 > ema15m_10 and ema15m_10 > ema15m_20 and (open > ema15m_5 or close > ema15m_5)
sell_lbl_15m = ''
if ema15m_5 < ema15m_10
    sell_lbl_15m := 'N-SELL'
else if ema15m_5 < ema15m_10 and ema15m_10 < ema15m_20 and (open < ema15m_5 or close < ema15m_5)
    sell_lbl_15m := 'B-SELL'    
if can_buy_15m
    if barstate.islast
        table.cell(panel, 0, 2, "15M", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 1, 2, "BUY", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 2, 2, str.format("{0}", rsi15m[0]), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 3, 2, str.tostring(sup15m), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 4, 2, str.tostring(res15m), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 5, 2, str.tostring(vol15m_change)+"%", bgcolor = i_c_buy, text_color=txt_color_15m)
        
        
if (sell_lbl_15m != '')
    if barstate.islast
        table.cell(panel, 0, 2, "15M", bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 1, 2, sell_lbl_15m, bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 2, 2, str.format("{0}", rsi15m[0]), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 3, 2, str.tostring(sup15m), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 4, 2, str.tostring(res15m), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 5, 2, str.tostring(vol15m_change)+"%", bgcolor = i_c_sell, text_color= txt_color_15m)
        
//1h
tf1h = '60'
tf1h_InMinutes = f_tfResInMinutes(tf1h)
chartOnLower_tf1h = currentTFInMinutes <= tf1h_InMinutes

tf1h_inH = str.tostring(tf1h_InMinutes / 60)
tf1h_text = if stockschart or futureschart
    tf1h_InMinutes >= 60 and tf1h_InMinutes < 960 ? tf1h_inH + 'h' : tf1h_InMinutes < 60 ? tf1h + 'm' : tf1h
else
    tf1h_InMinutes >= 60 and tf1h_InMinutes < 1440 ? tf1h_inH + 'h' : tf1h_InMinutes < 60 ? tf1h + 'm' : tf1h

barsin_tf1h = tf1h_InMinutes / currentTFInMinutes

tf1h_bar_index = math.ceil(1 * barsin_tf1h)

tf1h_bar_index_range = math.ceil(3 * barsin_tf1h)

var int tf1h_High_index = na
var int tf1h_Low_index = na

if tf1h_bar_index + tf1h_bar_index_range > 4999
    tf1h_High_index := 4999
    tf1h_Low_index := 4999
else
    tf1h_High_index :=  math.abs(ta.highestbars(high, nz(tf1h_bar_index_range, 1)))[tf1h_bar_index] + tf1h_bar_index
    tf1h_Low_index := math.abs(ta.lowestbars(low, nz(tf1h_bar_index_range, 1)))[tf1h_bar_index] + tf1h_bar_index


// S/R  = Time Frame 1 = tf1h
tf1h_Vol = f_tfSources(tf1h, volume)
tf1h_VolMA = ta.sma(tf1h_Vol, 5)
tf1h_High = f_tfSources(tf1h, high)
tf1h_Low = f_tfSources(tf1h, low)
tf1h_Open = f_tfSources(tf1h, open)
tf1h_Close = f_tfSources(tf1h, close)

tf1h_Up = f_tfUp(tf1h_High, tf1h_Vol, tf1h_VolMA)
tf1h_Down = f_tfDown(tf1h_Low, tf1h_Vol, tf1h_VolMA)

tf1h_CalcFractalUp() =>
    tf1h_FractalUp = 0.0
    tf1h_FractalUp := tf1h_Up ? tf1h_High[3] : tf1h_FractalUp[1]
    tf1h_FractalUp

tf1h_CalcFractalDown() =>
    tf1h_FractalDown = 0.0
    tf1h_FractalDown := tf1h_Down ? tf1h_Low[3] : tf1h_FractalDown[1]
    tf1h_FractalDown

tf1h_CalcFractalUpZone() =>
    tf1h_FractalUpZone = 0.0
    tf1h_FractalUpZone := tf1h_Up and tf1h_Close[3] >= tf1h_Open[3] ? tf1h_Close[3] : tf1h_Up and tf1h_Close[3] < tf1h_Open[3] ? tf1h_Open[3] : tf1h_FractalUpZone[1]
    tf1h_FractalUpZone

tf1h_CalcFractalDownZone() =>
    tf1h_FractalDownZone = 0.0
    tf1h_FractalDownZone := tf1h_Down and tf1h_Close[3] >= tf1h_Open[3] ? tf1h_Open[3] : tf1h_Down and tf1h_Close[3] < tf1h_Open[3] ? tf1h_Close[3] : tf1h_FractalDownZone[1]
    tf1h_FractalDownZone

tf1h_ResistanceUp = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalUp())
tf1h_ResistanceZone = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalUpZone())

tf1h_SupportDown = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalDown())
tf1h_SupportZone = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalDownZone())


ema_1h_5 = ta.ema(close, 5)
ema1h_5 = request.security(syminfo.tickerid, tf1h, ema_1h_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_10 = ta.ema(close, 10)
ema1h_10 = request.security(syminfo.tickerid, tf1h, ema_1h_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_20 = ta.ema(close, 20)
ema1h_20 = request.security(syminfo.tickerid, tf1h, ema_1h_20, barmerge.gaps_off, barmerge.lookahead_on)
rsi_1h = ta.rsi(close, 14)
rsi1h = request.security(syminfo.tickerid, tf1h, rsi_1h, barmerge.gaps_off, barmerge.lookahead_on)
vol1h = request.security(syminfo.tickerid, tf1h, volume, barmerge.gaps_off, barmerge.lookahead_on)
vol1h_change = f_RoundUp((vol1h[0] - vol1h[1])/vol1h[1]*100, 2)
txt_color_1h = vol1h_change > 0 ? color.white : color.yellow

sup1h = f_RoundUp((tf1h_SupportDown[0] + tf1h_SupportZone[0])/2, _n)
res1h = f_RoundUp((tf1h_ResistanceUp[0] + tf1h_ResistanceZone[0])/2, _n)

can_buy_1h = ema1h_5 > ema1h_10 and ema1h_10 > ema1h_20 and (open > ema1h_5 or close > ema1h_5)
sell_lbl_1h = ''
if ema1h_5 < ema1h_10
    sell_lbl_1h := 'N-SELL'
else if ema1h_5 < ema1h_10 and ema1h_10 < ema1h_20 and (open < ema1h_5 or close < ema1h_5)
    sell_lbl_1h := 'B-SELL'    

table.cell(panel, 0, 0, height=45)
if can_buy_1h
    if barstate.islast
        table.cell(panel, 0, 3, "1H", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 1, 3, "BUY", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 2, 3, str.format("{0}", rsi1h[0]), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 3, 3, str.tostring(sup1h), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 4, 3, str.tostring(res1h), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 5, 3, str.tostring(vol1h_change)+"%", bgcolor = i_c_buy, text_color= txt_color_1h)
        
        
if (sell_lbl_1h != '')
    if barstate.islast
        table.cell(panel, 0, 3, "1H", bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 1, 3, sell_lbl_1h, bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 2, 3, str.format("{0}", rsi1h[0]), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 3, 3, str.tostring(sup1h), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 4, 3, str.tostring(res1h), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 5, 3, str.tostring(vol1h_change)+"%", bgcolor = i_c_sell, text_color= txt_color_1h)
     
// alert
alertcondition(can_buy_1h, title='Buy Alert 1H', message='BUY 1H')
alertcondition(sell_lbl_1h == 'N-SELL', title='N-Sell Alert 1H', message='N-SELL 1H')
alertcondition(sell_lbl_1h == 'B-SELL', title='B-Sell Alert 1H', message='B-SELL 1H')




