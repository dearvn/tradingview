//@version=5
indicator("SnagProfit S/R", overlay = true)


stockschart = syminfo.type == 'stock'
futureschart = syminfo.type == 'futures'
indexchart = syminfo.type == 'index'
f_resInMinutes() =>
    if stockschart or futureschart or indexchart
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 16 : timeframe.isweekly ? 60. * 7 * 5 : timeframe.ismonthly ? 60. * 7 * 21 : na)
        _resInMinutes
    else
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)
        _resInMinutes
// ————— Returns the float minutes value of the string _res.
f_tfResInMinutes(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    // Dependency: f_resInMinutes().
    request.security(syminfo.tickerid, _res, f_resInMinutes())

f_tfSources(_res, _source) =>
    request.security(syminfo.tickerid, _res, _source)

f_tfUp(_TF_High, _TF_Vol, _TF_VolMA) =>
    _TF_High[3] > _TF_High[4] and _TF_High[4] > _TF_High[5] and _TF_High[2] < _TF_High[3] and _TF_High[1] < _TF_High[2] and _TF_Vol[3] > _TF_VolMA[3]

f_tfDown(_TF_Low, _TF_Vol, _TF_VolMA) =>
    _TF_Low[3] < _TF_Low[4] and _TF_Low[4] < _TF_Low[5] and _TF_Low[2] > _TF_Low[3] and _TF_Low[1] > _TF_Low[2] and _TF_Vol[3] > _TF_VolMA[3]

f_RoundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor
    
f_nDecimals(_in) =>
    n  = int(na), s = str.tostring(_in), p = str.pos(s, ".")
    n := na(str.tonumber(s)) ? int(na) : na(p) ? 0 :
     str.length(str.substring(s, p + 1))
     
     
_n = f_nDecimals(close)
currentTFInMinutes = f_resInMinutes()

var string GP2 = "Display"

string  i_tableYpos = input.string("top", "Panel position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input.string("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
color   i_c_buy    = input.color(color.new(color.green, 30), "Buy", inline = "12", group = GP2)
color   i_c_sell    = input.color(color.new(color.red, 10), "Sell", inline = "12", group = GP2)
color   i_c_neutral = input.color(color.new(color.gray, 30), "Neutral", inline = "12", group = GP2)


var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 6, 10)

// timeframe 1h
tf1h = "60"
tf1h_InMinutes = f_tfResInMinutes(tf1h)
chartOnLower_tf1h = currentTFInMinutes <= tf1h_InMinutes

tf1h_inH = str.tostring(tf1h_InMinutes / 60)
tf1h_text = if stockschart or futureschart
    tf1h_InMinutes >= 60 and tf1h_InMinutes < 960 ? tf1h_inH + 'h' : tf1h_InMinutes < 60 ? tf1h + 'm' : tf1h
else
    tf1h_InMinutes >= 60 and tf1h_InMinutes < 1440 ? tf1h_inH + 'h' : tf1h_InMinutes < 60 ? tf1h + 'm' : tf1h

barsin_tf1h = tf1h_InMinutes / currentTFInMinutes

tf1h_bar_index = math.ceil(1 * barsin_tf1h)

tf1h_bar_index_range = math.ceil(3 * barsin_tf1h)

var int tf1h_High_index = na
var int tf1h_Low_index = na

if tf1h_bar_index + tf1h_bar_index_range > 4999
    tf1h_High_index := 4999
    tf1h_Low_index := 4999
else
    tf1h_High_index :=  math.abs(ta.highestbars(high, nz(tf1h_bar_index_range, 1)))[tf1h_bar_index] + tf1h_bar_index
    tf1h_Low_index := math.abs(ta.lowestbars(low, nz(tf1h_bar_index_range, 1)))[tf1h_bar_index] + tf1h_bar_index


// S/R  = Time Frame 1 = tf1h
tf1h_Vol = f_tfSources(tf1h, volume)
tf1h_VolMA = ta.sma(tf1h_Vol, 5)
tf1h_High = f_tfSources(tf1h, high)
tf1h_Low = f_tfSources(tf1h, low)
tf1h_Open = f_tfSources(tf1h, open)
tf1h_Close = f_tfSources(tf1h, close)

tf1h_Up = f_tfUp(tf1h_High, tf1h_Vol, tf1h_VolMA)
tf1h_Down = f_tfDown(tf1h_Low, tf1h_Vol, tf1h_VolMA)

tf1h_CalcFractalUp() =>
    tf1h_FractalUp = 0.0
    tf1h_FractalUp := tf1h_Up ? tf1h_High[3] : tf1h_FractalUp[1]
    tf1h_FractalUp

tf1h_CalcFractalDown() =>
    tf1h_FractalDown = 0.0
    tf1h_FractalDown := tf1h_Down ? tf1h_Low[3] : tf1h_FractalDown[1]
    tf1h_FractalDown

tf1h_CalcFractalUpZone() =>
    tf1h_FractalUpZone = 0.0
    tf1h_FractalUpZone := tf1h_Up and tf1h_Close[3] >= tf1h_Open[3] ? tf1h_Close[3] : tf1h_Up and tf1h_Close[3] < tf1h_Open[3] ? tf1h_Open[3] : tf1h_FractalUpZone[1]
    tf1h_FractalUpZone

tf1h_CalcFractalDownZone() =>
    tf1h_FractalDownZone = 0.0
    tf1h_FractalDownZone := tf1h_Down and tf1h_Close[3] >= tf1h_Open[3] ? tf1h_Open[3] : tf1h_Down and tf1h_Close[3] < tf1h_Open[3] ? tf1h_Close[3] : tf1h_FractalDownZone[1]
    tf1h_FractalDownZone

tf1h_ResistanceUp = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalUp())
tf1h_ResistanceZone = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalUpZone())

tf1h_SupportDown = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalDown())
tf1h_SupportZone = request.security(syminfo.tickerid, tf1h, tf1h_CalcFractalDownZone())

var resistanceUp = array.new_float()
var resistanceZone = array.new_float()

if not array.includes(resistanceUp, tf1h_ResistanceUp[0])
    array.push(resistanceUp, tf1h_ResistanceUp[0])
    array.push(resistanceZone, tf1h_ResistanceZone[0])
    

close1h = request.security(syminfo.tickerid, tf1h, close, barmerge.gaps_off, barmerge.lookahead_on)
open1h = request.security(syminfo.tickerid, tf1h, open, barmerge.gaps_off, barmerge.lookahead_on)
low1h = request.security(syminfo.tickerid, tf1h, low, barmerge.gaps_off, barmerge.lookahead_on)
high1h = request.security(syminfo.tickerid, tf1h, high, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_5 = ta.sma(close, 5)
ema1h_5 = request.security(syminfo.tickerid, tf1h, ema_1h_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_10 = ta.sma(close, 10)
ema1h_10 = request.security(syminfo.tickerid, tf1h, ema_1h_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_20 = ta.sma(close, 20)
ema1h_20 = request.security(syminfo.tickerid, tf1h, ema_1h_20, barmerge.gaps_off, barmerge.lookahead_on)
rsi_1h = ta.rsi(close, 14)
rsi1h = request.security(syminfo.tickerid, tf1h, rsi_1h, barmerge.gaps_off, barmerge.lookahead_on)



can_buy_s = false
//2. BUY Support
//if ta.crossover(close1h, tf1h_SupportZone[0])
if (close1h[3] >= tf1h_SupportDown[0] and close1h[3] <= tf1h_SupportZone[0] or close1h[2] >= tf1h_SupportDown[0] and close1h[2] <= tf1h_SupportZone[0] or close1h[1] >= tf1h_SupportDown[0] and close1h[1] <= tf1h_SupportZone[0]) and close1h > tf1h_SupportZone[0]
    //if ema1h_5 > ema1h_10 and open1h > ema1h_20 and ema1h_5[1] < ema1h_10[1] //and rsi1h > 50
    can_buy_s := true
    //label.new(bar_index, close, text="S:"+str.format("{0} {1}", tf1h_SupportDown[0], tf1h_SupportZone[0]), textcolor=color.yellow, style=label.style_triangleup)

can_sell_r = false
//3. SELL RESISTANCE
//if ta.crossunder(close1h, tf1h_ResistanceZone[0])
cnst = 1.0
for i = 0 to 10
    ok = (close1h[3]*cnst >= tf1h_ResistanceZone[i] and close1h[3]*cnst <= tf1h_ResistanceUp[i] or close1h[2]*cnst >= tf1h_ResistanceZone[i] and close1h[2]*cnst <= tf1h_ResistanceUp[i] or close1h[1]*cnst >= tf1h_ResistanceZone[i] and close1h[1]*cnst <= tf1h_ResistanceUp[i] or open1h[3]*cnst >= tf1h_ResistanceZone[i] and open1h[3]*cnst <= tf1h_ResistanceUp[i] or open1h[2]*cnst >= tf1h_ResistanceZone[i] and open1h[2]*1.1 <= tf1h_ResistanceUp[i] or open1h[1]*cnst >= tf1h_ResistanceZone[i] and open1h[1]*cnst <= tf1h_ResistanceUp[i]) and close1h < tf1h_ResistanceZone[i]
    if ok
        can_sell_r := true
        break
    //label.new(bar_index, close, text="R:"+str.format("{0} {1}", tf1h_ResistanceZone[0], resistanceUp[1]), textcolor=color.yellow, style=label.style_triangleup)
    
// BUY SELL RESISTANCE    
var show_r = display.all

r_buy1= ta.barssince(can_buy_s)
r_sell1 = ta.barssince(can_sell_r)
r_1 = r_buy1[1] > r_sell1[1] ? can_buy_s : na
plotshape(r_1,title="Buy-S",text='BUY-S', color=color.green, style=shape.triangleup,location=location.bottom,size=size.tiny, display=show_r)

r_buy2= ta.barssince(can_sell_r)
r_sell2 = ta.barssince(can_buy_s)
r_2 = r_buy2[1] > r_sell2[1] ? can_sell_r : na
plotshape(r_2,title="Sell-R",text='SELL-R', color=color.red, style=shape.triangledown,location=location.top,size=size.tiny, display=show_r)


alertcondition(can_buy_s, title='BUY-S', message='BUY-S')
alertcondition(can_sell_r, title='SELL-R', message='SELL-R')
