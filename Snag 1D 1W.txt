//@version=5
indicator("SnagProfit Logic 1D 1W", overlay = true)


stockschart = syminfo.type == 'stock'
futureschart = syminfo.type == 'futures'
indexchart = syminfo.type == 'index'
// // --------- This ensures that no plots from lower time frames will be plotted on higher time frames.
// ————— Converts current chart resolution into a float minutes value.
f_resInMinutes() =>
    if stockschart or futureschart or indexchart
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 16 : timeframe.isweekly ? 60. * 7 * 5 : timeframe.ismonthly ? 60. * 7 * 21 : na)
        _resInMinutes
    else
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)
        _resInMinutes
// ————— Returns the float minutes value of the string _res.
f_tfResInMinutes(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    // Dependency: f_resInMinutes().
    request.security(syminfo.tickerid, _res, f_resInMinutes())

f_tfSources(_res, _source) =>
    request.security(syminfo.tickerid, _res, _source)

f_tfUp(_TF_High, _TF_Vol, _TF_VolMA) =>
    _TF_High[3] > _TF_High[4] and _TF_High[4] > _TF_High[5] and _TF_High[2] < _TF_High[3] and _TF_High[1] < _TF_High[2] and _TF_Vol[3] > _TF_VolMA[3]

f_tfDown(_TF_Low, _TF_Vol, _TF_VolMA) =>
    _TF_Low[3] < _TF_Low[4] and _TF_Low[4] < _TF_Low[5] and _TF_Low[2] > _TF_Low[3] and _TF_Low[1] > _TF_Low[2] and _TF_Vol[3] > _TF_VolMA[3]

f_RoundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor
    
f_nDecimals(_in) =>
    n  = int(na), s = str.tostring(_in), p = str.pos(s, ".")
    n := na(str.tonumber(s)) ? int(na) : na(p) ? 0 :
     str.length(str.substring(s, p + 1))

_n = f_nDecimals(close)

var string GP2 = "Display"
string  i_tableYpos = input.string("top", "Panel position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input.string("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
color   i_c_buy    = input.color(color.new(color.green, 30), "Buy", inline = "12", group = GP2)
color   i_c_sell    = input.color(color.new(color.red, 10), "Sell", inline = "12", group = GP2)
color   i_c_neutral = input.color(color.new(color.gray, 30), "Neutral", inline = "12", group = GP2)


var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 6, 10)
if barstate.islast
    // Table header.
    table.cell(panel, 0, 1, "TF", bgcolor = i_c_neutral, text_color=color.white, width=4)
    table.cell(panel, 1, 1, "TYPE", bgcolor = i_c_neutral, text_color=color.white, width=4)
    table.cell(panel, 2, 1, "RSI", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 3, 1, "S", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 4, 1, "R", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 5, 1, "%V", bgcolor = i_c_neutral, text_color=color.white, width=6)
    
//1d
tf1d = 'D'
tf1d_InMinutes = f_tfResInMinutes(tf1d)
currentTFInMinutes = f_resInMinutes()
chartOnLower_tf1d = currentTFInMinutes <= tf1d_InMinutes

tf1d_inH = str.tostring(tf1d_InMinutes / 60)
tf1d_text = if stockschart or futureschart
    tf1d_InMinutes >= 60 and tf1d_InMinutes < 960 ? tf1d_inH + 'h' : tf1d_InMinutes < 60 ? tf1d + 'm' : tf1d
else
    tf1d_InMinutes >= 60 and tf1d_InMinutes < 1440 ? tf1d_inH + 'h' : tf1d_InMinutes < 60 ? tf1d + 'm' : tf1d

barsin_tf1d = tf1d_InMinutes / currentTFInMinutes

tf1d_bar_index = math.ceil(1 * barsin_tf1d)

tf1d_bar_index_range = math.ceil(3 * barsin_tf1d)

var int tf1d_High_index = na
var int tf1d_Low_index = na

if tf1d_bar_index + tf1d_bar_index_range > 4999
    tf1d_High_index := 4999
    tf1d_Low_index := 4999
else
    tf1d_High_index :=  math.abs(ta.highestbars(high, nz(tf1d_bar_index_range, 1)))[tf1d_bar_index] + tf1d_bar_index
    tf1d_Low_index := math.abs(ta.lowestbars(low, nz(tf1d_bar_index_range, 1)))[tf1d_bar_index] + tf1d_bar_index


// S/R  = Time Frame 1 = tf1d
tf1d_Vol = f_tfSources(tf1d, volume)
tf1d_VolMA = ta.sma(tf1d_Vol, 5)
tf1d_High = f_tfSources(tf1d, high)
tf1d_Low = f_tfSources(tf1d, low)
tf1d_Open = f_tfSources(tf1d, open)
tf1d_Close = f_tfSources(tf1d, close)

tf1d_Up = f_tfUp(tf1d_High, tf1d_Vol, tf1d_VolMA)
tf1d_Down = f_tfDown(tf1d_Low, tf1d_Vol, tf1d_VolMA)

tf1d_CalcFractalUp() =>
    tf1d_FractalUp = 0.0
    tf1d_FractalUp := tf1d_Up ? tf1d_High[3] : tf1d_FractalUp[1]
    tf1d_FractalUp

tf1d_CalcFractalDown() =>
    tf1d_FractalDown = 0.0
    tf1d_FractalDown := tf1d_Down ? tf1d_Low[3] : tf1d_FractalDown[1]
    tf1d_FractalDown

tf1d_CalcFractalUpZone() =>
    tf1d_FractalUpZone = 0.0
    tf1d_FractalUpZone := tf1d_Up and tf1d_Close[3] >= tf1d_Open[3] ? tf1d_Close[3] : tf1d_Up and tf1d_Close[3] < tf1d_Open[3] ? tf1d_Open[3] : tf1d_FractalUpZone[1]
    tf1d_FractalUpZone

tf1d_CalcFractalDownZone() =>
    tf1d_FractalDownZone = 0.0
    tf1d_FractalDownZone := tf1d_Down and tf1d_Close[3] >= tf1d_Open[3] ? tf1d_Open[3] : tf1d_Down and tf1d_Close[3] < tf1d_Open[3] ? tf1d_Close[3] : tf1d_FractalDownZone[1]
    tf1d_FractalDownZone

tf1d_ResistanceUp = request.security(syminfo.tickerid, tf1d, tf1d_CalcFractalUp())
tf1d_ResistanceZone = request.security(syminfo.tickerid, tf1d, tf1d_CalcFractalUpZone())

tf1d_SupportDown = request.security(syminfo.tickerid, tf1d, tf1d_CalcFractalDown())
tf1d_SupportZone = request.security(syminfo.tickerid, tf1d, tf1d_CalcFractalDownZone())


ema_1d_5 = ta.ema(close, 5)
ema1d_5 = request.security(syminfo.tickerid, tf1d, ema_1d_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_1d_10 = ta.ema(close, 10)
ema1d_10 = request.security(syminfo.tickerid, tf1d, ema_1d_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_1d_20 = ta.ema(close, 20)
ema1d_20 = request.security(syminfo.tickerid, tf1d, ema_1d_20, barmerge.gaps_off, barmerge.lookahead_on)
rsi_1d = ta.rsi(close, 14)
rsi1d = request.security(syminfo.tickerid, tf1d, rsi_1d, barmerge.gaps_off, barmerge.lookahead_on)
vol1d = request.security(syminfo.tickerid, tf1d, volume, barmerge.gaps_off, barmerge.lookahead_on)
vol1d_change = f_RoundUp((vol1d[0] - vol1d[1])/vol1d[1]*100, 2)
txt_color_1d = vol1d_change > 0 ? color.white : color.yellow

sup1d = f_RoundUp((tf1d_SupportDown[0] + tf1d_SupportZone[0])/2, _n)
res1d = f_RoundUp((tf1d_ResistanceUp[0] + tf1d_ResistanceZone[0])/2, _n)

can_buy_1d = ema1d_5 > ema1d_10 and ema1d_10 > ema1d_20 and (open > ema1d_5 or close > ema1d_5)
sell_lbl_1d = ''
if ema1d_5 < ema1d_10
    sell_lbl_1d := 'N-SELL'
else if ema1d_5 < ema1d_10 and ema1d_10 < ema1d_20 and (open < ema1d_5 or close < ema1d_5)
    sell_lbl_1d := 'B-SELL'    

if can_buy_1d
    if barstate.islast
        table.cell(panel, 0, 2, "1D", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 1, 2, "BUY", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 2, 2, str.format("{0}", rsi1d[0]), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 3, 2, str.tostring(sup1d), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 4, 2, str.tostring(res1d), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 5, 2, str.tostring(vol1d_change)+"%", bgcolor = i_c_buy, text_color=txt_color_1d)
        
        
if (sell_lbl_1d != '')
    if barstate.islast
        table.cell(panel, 0, 2, "1D", bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 1, 2, sell_lbl_1d, bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 2, 2, str.format("{0}", rsi1d[0]), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 3, 2, str.tostring(sup1d), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 4, 2, str.tostring(res1d), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 5, 2, str.tostring(vol1d_change)+"%", bgcolor = i_c_sell, text_color= txt_color_1d)
        
//1w
tf1w = 'W'
tf1w_InMinutes = f_tfResInMinutes(tf1w)
chartOnLower_tf1w = currentTFInMinutes <= tf1w_InMinutes

tf1w_inH = str.tostring(tf1w_InMinutes / 60)
tf1w_text = if stockschart or futureschart
    tf1w_InMinutes >= 60 and tf1w_InMinutes < 960 ? tf1w_inH + 'h' : tf1w_InMinutes < 60 ? tf1w + 'm' : tf1w
else
    tf1w_InMinutes >= 60 and tf1w_InMinutes < 1440 ? tf1w_inH + 'h' : tf1w_InMinutes < 60 ? tf1w + 'm' : tf1w

barsin_tf1w = tf1w_InMinutes / currentTFInMinutes

tf1w_bar_index = math.ceil(1 * barsin_tf1w)

tf1w_bar_index_range = math.ceil(3 * barsin_tf1w)

var int tf1w_High_index = na
var int tf1w_Low_index = na

if tf1w_bar_index + tf1w_bar_index_range > 4999
    tf1w_High_index := 4999
    tf1w_Low_index := 4999
else
    tf1w_High_index :=  math.abs(ta.highestbars(high, nz(tf1w_bar_index_range, 1)))[tf1w_bar_index] + tf1w_bar_index
    tf1w_Low_index := math.abs(ta.lowestbars(low, nz(tf1w_bar_index_range, 1)))[tf1w_bar_index] + tf1w_bar_index


// S/R  = Time Frame 1 = tf1w
tf1w_Vol = f_tfSources(tf1w, volume)
tf1w_VolMA = ta.sma(tf1w_Vol, 5)
tf1w_High = f_tfSources(tf1w, high)
tf1w_Low = f_tfSources(tf1w, low)
tf1w_Open = f_tfSources(tf1w, open)
tf1w_Close = f_tfSources(tf1w, close)

tf1w_Up = f_tfUp(tf1w_High, tf1w_Vol, tf1w_VolMA)
tf1w_Down = f_tfDown(tf1w_Low, tf1w_Vol, tf1w_VolMA)

tf1w_CalcFractalUp() =>
    tf1w_FractalUp = 0.0
    tf1w_FractalUp := tf1w_Up ? tf1w_High[3] : tf1w_FractalUp[1]
    tf1w_FractalUp

tf1w_CalcFractalDown() =>
    tf1w_FractalDown = 0.0
    tf1w_FractalDown := tf1w_Down ? tf1w_Low[3] : tf1w_FractalDown[1]
    tf1w_FractalDown

tf1w_CalcFractalUpZone() =>
    tf1w_FractalUpZone = 0.0
    tf1w_FractalUpZone := tf1w_Up and tf1w_Close[3] >= tf1w_Open[3] ? tf1w_Close[3] : tf1w_Up and tf1w_Close[3] < tf1w_Open[3] ? tf1w_Open[3] : tf1w_FractalUpZone[1]
    tf1w_FractalUpZone

tf1w_CalcFractalDownZone() =>
    tf1w_FractalDownZone = 0.0
    tf1w_FractalDownZone := tf1w_Down and tf1w_Close[3] >= tf1w_Open[3] ? tf1w_Open[3] : tf1w_Down and tf1w_Close[3] < tf1w_Open[3] ? tf1w_Close[3] : tf1w_FractalDownZone[1]
    tf1w_FractalDownZone

tf1w_ResistanceUp = request.security(syminfo.tickerid, tf1w, tf1w_CalcFractalUp())
tf1w_ResistanceZone = request.security(syminfo.tickerid, tf1w, tf1w_CalcFractalUpZone())

tf1w_SupportDown = request.security(syminfo.tickerid, tf1w, tf1w_CalcFractalDown())
tf1w_SupportZone = request.security(syminfo.tickerid, tf1w, tf1w_CalcFractalDownZone())


ema_1w_5 = ta.ema(close, 5)
ema1w_5 = request.security(syminfo.tickerid, tf1w, ema_1w_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_1w_10 = ta.ema(close, 10)
ema1w_10 = request.security(syminfo.tickerid, tf1w, ema_1w_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_1w_20 = ta.ema(close, 20)
ema1w_20 = request.security(syminfo.tickerid, tf1w, ema_1w_20, barmerge.gaps_off, barmerge.lookahead_on)
rsi_1w = ta.rsi(close, 14)
rsi1w = request.security(syminfo.tickerid, tf1w, rsi_1w, barmerge.gaps_off, barmerge.lookahead_on)
vol1w = request.security(syminfo.tickerid, tf1w, volume, barmerge.gaps_off, barmerge.lookahead_on)
vol1w_change = f_RoundUp((vol1w[0] - vol1w[1])/vol1w[1]*100, 2)
txt_color_1w = vol1w_change > 0 ? color.white : color.yellow

sup1w = f_RoundUp((tf1w_SupportDown[0] + tf1w_SupportZone[0])/2, _n)
res1w = f_RoundUp((tf1w_ResistanceUp[0] + tf1w_ResistanceZone[0])/2, _n)


can_buy_1w = ema1w_5 > ema1w_10 and ema1w_10 > ema1w_20 and (open > ema1w_5 or close > ema1w_5)
sell_lbl_1w = ''
if ema1w_5 < ema1w_10
    sell_lbl_1w := 'N-SELL'
else if ema1w_5 < ema1w_10 and ema1w_10 < ema1w_20 and (open < ema1w_5 or close < ema1w_5)
    sell_lbl_1w := 'B-SELL'    

table.cell(panel, 0, 0, height=71)
if can_buy_1w
    if barstate.islast
        table.cell(panel, 0, 3, "1W", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 1, 3, "BUY", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 2, 3, str.format("{0}", rsi1w[0]), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 3, 3, str.tostring(sup1w), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 4, 3, str.tostring(res1w), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 5, 3, str.tostring(vol1w_change)+"%", bgcolor = i_c_buy, text_color= txt_color_1w)
        
        
if (sell_lbl_1w != '')
    if barstate.islast
        table.cell(panel, 0, 3, "1W", bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 1, 3, sell_lbl_1w, bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 2, 3, str.format("{0}", rsi1w[0]), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 3, 3, str.tostring(sup1w), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 4, 3, str.tostring(res1w), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 5, 3, str.tostring(vol1w_change)+"%", bgcolor = i_c_sell, text_color= txt_color_1w)
     

