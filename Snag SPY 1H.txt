//@version=5
indicator("SPY Trending ", overlay = true)

sym = 'SPY'
stockschart = syminfo.type == 'stock'
futureschart = syminfo.type == 'futures'
indexchart = syminfo.type == 'index'
// // --------- This ensures that no plots from lower time frames will be plotted on higher time frames.
// ————— Converts current chart resolution into a float minutes value.
f_resInMinutes() =>
    if stockschart or futureschart or indexchart
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 16 : timeframe.isweekly ? 60. * 7 * 5 : timeframe.ismonthly ? 60. * 7 * 21 : na)
        _resInMinutes
    else
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)
        _resInMinutes
// ————— Returns the float minutes value of the string _res.
f_tfResInMinutes(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    // Dependency: f_resInMinutes().
    request.security(sym, _res, f_resInMinutes())

f_tfSources(_res, _source) =>
    request.security(sym, _res, _source)

f_tfUp(_TF_High, _TF_Vol, _TF_VolMA) =>
    _TF_High[3] > _TF_High[4] and _TF_High[4] > _TF_High[5] and _TF_High[2] < _TF_High[3] and _TF_High[1] < _TF_High[2] and _TF_Vol[3] > _TF_VolMA[3]

f_tfDown(_TF_Low, _TF_Vol, _TF_VolMA) =>
    _TF_Low[3] < _TF_Low[4] and _TF_Low[4] < _TF_Low[5] and _TF_Low[2] > _TF_Low[3] and _TF_Low[1] > _TF_Low[2] and _TF_Vol[3] > _TF_VolMA[3]

f_RoundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor
    
f_nDecimals(_in) =>
    n  = int(na), s = str.tostring(_in), p = str.pos(s, ".")
    n := na(str.tonumber(s)) ? int(na) : na(p) ? 0 :
     str.length(str.substring(s, p + 1))

_n = f_nDecimals(close)
currentTFInMinutes = f_resInMinutes()

var string GP2 = "Display"

enable_sl = input.string(title='Display All, Short, Long, or Disable', defval='Short', options=['All', 'Short', 'Long', 'Disable'], group='*** Short Long Show ***')

string  i_tableYpos = input.string("top", "Panel position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input.string("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
color   i_c_buy    = input.color(color.new(color.green, 30), "Buy", inline = "12", group = GP2)
color   i_c_sell    = input.color(color.new(color.red, 10), "Sell", inline = "12", group = GP2)
color   i_c_neutral = input.color(color.new(color.gray, 30), "Neutral", inline = "12", group = GP2)


var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 6, 10)

//1m
tf1m = '1'
ema_1m_5 = ta.ema(close, 5)
ema1m_5 = request.security(sym, tf1m, ema_1m_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_1m_10 = ta.ema(close, 10)
ema1m_10 = request.security(sym, tf1m, ema_1m_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_1m_20 = ta.ema(close, 20)
ema1m_20 = request.security(sym, tf1m, ema_1m_20, barmerge.gaps_off, barmerge.lookahead_on)
can_buy_1m = ema1m_5 > ema1m_10 and ema1m_10 > ema1m_20 and (open > ema1m_5 or close > ema1m_5)


//5m
tf5m = '5'
//close5m = request.security(sym, tf5m, close, barmerge.gaps_off, barmerge.lookahead_on)
ema_5m_5 = ta.ema(close, 5)
ema5m_5 = request.security(sym, tf5m, ema_5m_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_5m_10 = ta.ema(close, 10)
ema5m_10 = request.security(sym, tf5m, ema_5m_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_5m_20 = ta.ema(close, 20)
ema5m_20 = request.security(sym, tf5m, ema_5m_20, barmerge.gaps_off, barmerge.lookahead_on)
//[macdLine_5m, signalLine_5m, histLine_5m] = ta.macd(close, 12, 26, 9)
//macd5m = request.security(sym, tf5m, macdLine_5m, barmerge.gaps_off, barmerge.lookahead_on)

//avg_price_5 = (close[3] +close[2] + close[1] + close[0]) / 4
//fake_buy_5 = ema5m_5 < ema5m_20 and close > ema5m_5 and open[0] > avg_price_5 and open[0] > close[1] and close and open[0] < close[1]
//ok_buy_5 = not fake_buy_5 and open > ema5m_5 and high > ema5m_5 and high > ema5m_10 

//can_buy_5m = ema5m_5 >  ema5m_10 and ok_buy_5 
can_buy_5m = ema5m_5 > ema5m_10 and ema5m_10 > ema5m_20 and (open > ema5m_5 or close > ema5m_5)
can_sell_5m = ema5m_5 < ema5m_10 and ema5m_10 < ema5m_20 and (open < ema5m_5 or close < ema5m_5)
    
//can_sell_5m = close[0] < close[1] and close[1] < close[2] and close < ema5m_5 and open < ema5m_5 and ema5m_5 < ema5m_10 and low < ema5m_5 and open < avg_price_5

//can_buy_5m = ema5m_5 > ema5m_10 and close > ema5m_20 //and macd5m[1] < macd5m[0]
//can_sell_5m = ema5m_5 < ema5m_10 //and close < ema5m_20 //and close5m[1] > close5m[0]



//15m
tf15m = '15'
//close15m = request.security(sym, tf15m, close, barmerge.gaps_off, barmerge.lookahead_on)
ema_15m_5 = ta.ema(close, 5)
ema15m_5 = request.security(sym, tf15m, ema_15m_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_15m_10 = ta.ema(close, 10)
ema15m_10 = request.security(sym, tf15m, ema_15m_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_15m_20 = ta.ema(close, 20)
ema15m_20 = request.security(sym, tf15m, ema_15m_20, barmerge.gaps_off, barmerge.lookahead_on)
//[macdLine_15m, signalLine_15m, histLine_15m] = ta.macd(close, 12, 26, 9)
//macd15m = request.security(sym, tf15m, macdLine_15m, barmerge.gaps_off, barmerge.lookahead_on)

//avg_price_15 = (close[3] +close[2] + close[1] + close[0]) / 4
//fake_buy_15 = ema15m_5 < ema15m_20 and close > ema15m_5 and open[0] > avg_price_15 and open[0] > close[1] and close and open[0] < close[1]
//ok_buy_15 = not fake_buy_15 and open > ema15m_5 and high > ema15m_5 and high > ema15m_10 

//can_buy_15m = ema15m_5 >  ema15m_10 and ok_buy_15 
//can_sell_15m = close[0] < close[1] and close[1] < close[2] and close < ema15m_5 and open < ema15m_5 and ema15m_5 < ema15m_10 and low < ema15m_5 and open < avg_price_15
can_buy_15m = ema15m_5 > ema15m_10 and ema15m_10 > ema15m_20 and (open > ema15m_5 or close > ema15m_5)
can_sell_15m = ema15m_5 < ema15m_10 and ema15m_10 < ema15m_20 and (open < ema15m_5 or close < ema15m_5)
    
//can_buy_15m = ema15m_5 > ema15m_10 and close > ema15m_20 //and macd15m[1] < macd15m[0]
//can_sell_15m = ema15m_5 < ema15m_10 //and close < ema15m_20 //and close15m[1] > close15m[0]

tf1h = "60"
tf1h_InMinutes = f_tfResInMinutes(tf1h)
chartOnLower_tf1h = currentTFInMinutes <= tf1h_InMinutes

tf1h_inH = str.tostring(tf1h_InMinutes / 60)
tf1h_text = if stockschart or futureschart
    tf1h_InMinutes >= 60 and tf1h_InMinutes < 960 ? tf1h_inH + 'h' : tf1h_InMinutes < 60 ? tf1h + 'm' : tf1h
else
    tf1h_InMinutes >= 60 and tf1h_InMinutes < 1440 ? tf1h_inH + 'h' : tf1h_InMinutes < 60 ? tf1h + 'm' : tf1h

barsin_tf1h = tf1h_InMinutes / currentTFInMinutes

tf1h_bar_index = math.ceil(1 * barsin_tf1h)

tf1h_bar_index_range = math.ceil(3 * barsin_tf1h)

var int tf1h_High_index = na
var int tf1h_Low_index = na

if tf1h_bar_index + tf1h_bar_index_range > 4999
    tf1h_High_index := 4999
    tf1h_Low_index := 4999
else
    tf1h_High_index :=  math.abs(ta.highestbars(high, nz(tf1h_bar_index_range, 1)))[tf1h_bar_index] + tf1h_bar_index
    tf1h_Low_index := math.abs(ta.lowestbars(low, nz(tf1h_bar_index_range, 1)))[tf1h_bar_index] + tf1h_bar_index


// S/R  = Time Frame 1 = tf1h
tf1h_Vol = f_tfSources(tf1h, volume)
tf1h_VolMA = ta.sma(tf1h_Vol, 5)
tf1h_High = f_tfSources(tf1h, high)
tf1h_Low = f_tfSources(tf1h, low)
tf1h_Open = f_tfSources(tf1h, open)
tf1h_Close = f_tfSources(tf1h, close)

tf1h_Up = f_tfUp(tf1h_High, tf1h_Vol, tf1h_VolMA)
tf1h_Down = f_tfDown(tf1h_Low, tf1h_Vol, tf1h_VolMA)

tf1h_CalcFractalUp() =>
    tf1h_FractalUp = 0.0
    tf1h_FractalUp := tf1h_Up ? tf1h_High[3] : tf1h_FractalUp[1]
    tf1h_FractalUp

tf1h_CalcFractalDown() =>
    tf1h_FractalDown = 0.0
    tf1h_FractalDown := tf1h_Down ? tf1h_Low[3] : tf1h_FractalDown[1]
    tf1h_FractalDown

tf1h_CalcFractalUpZone() =>
    tf1h_FractalUpZone = 0.0
    tf1h_FractalUpZone := tf1h_Up and tf1h_Close[3] >= tf1h_Open[3] ? tf1h_Close[3] : tf1h_Up and tf1h_Close[3] < tf1h_Open[3] ? tf1h_Open[3] : tf1h_FractalUpZone[1]
    tf1h_FractalUpZone

tf1h_CalcFractalDownZone() =>
    tf1h_FractalDownZone = 0.0
    tf1h_FractalDownZone := tf1h_Down and tf1h_Close[3] >= tf1h_Open[3] ? tf1h_Open[3] : tf1h_Down and tf1h_Close[3] < tf1h_Open[3] ? tf1h_Close[3] : tf1h_FractalDownZone[1]
    tf1h_FractalDownZone

tf1h_ResistanceUp = request.security(sym, tf1h, tf1h_CalcFractalUp())
tf1h_ResistanceZone = request.security(sym, tf1h, tf1h_CalcFractalUpZone())

tf1h_SupportDown = request.security(sym, tf1h, tf1h_CalcFractalDown())
tf1h_SupportZone = request.security(sym, tf1h, tf1h_CalcFractalDownZone())



close1h = request.security(sym, tf1h, close, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_5 = ta.ema(close, 5)
ema1h_5 = request.security(sym, tf1h, ema_1h_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_10 = ta.ema(close, 10)
ema1h_10 = request.security(sym, tf1h, ema_1h_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_1h_20 = ta.ema(close, 20)
ema1h_20 = request.security(sym, tf1h, ema_1h_20, barmerge.gaps_off, barmerge.lookahead_on)
//[macdLine_1h, signalLine_1h, histLine_1h] = ta.macd(close, 12, 26, 9)
//macd1h = request.security(sym, tf1h, macdLine_1h, barmerge.gaps_off, barmerge.lookahead_on)


//can_buy_1h = ema1h_5 > ema1h_10 and close > ema1h_20 //and macd1h[1] < macd1h[0]
//can_sell_1h = ema1h_5 < ema1h_10 //and close < ema1h_20 // and close1h[1] > close1h[0]
//avg_price = (close[3] +close[2] + close[1] + close[0]) / 4
//fake_buy = ema1h_5 < ema1h_20 and close > ema1h_5 and open[0] > avg_price and open[0] > close[1] and close and open[0] < close[1]
//ok_buy = not fake_buy and open > ema1h_5 and high > ema1h_5 and high > ema1h_10 

//can_buy_1h = ema1h_5 >  ema1h_10 and ok_buy //and close > ema1h_20 //and macd1h[1] < macd1h[0]
can_buy_1h = ema1h_5 > ema1h_10 and ema1h_10 > ema1h_20 and (open > ema1h_5 or close > ema1h_5)
can_sell_1h = ema1h_5 < ema1h_10 and ema1h_10 < ema1h_20 and (open < ema1h_5 or close < ema1h_5)


//can_sell_1h = close[0] < close[1] and close[1] < close[2] and close < ema1h_5 and open < ema1h_5 and ema1h_5 < ema1h_10 and low < ema1h_5 and open < avg_price
//can_sell_1h = ema1h_5 - 0.75 < ema1h_10 //and close < ema1h_20 // and close1h[1] > close1h[0]

//can_sell_1h = pos_sell


if close1h[0] >= tf1h_ResistanceZone[0] and close1h[0] <= tf1h_ResistanceUp[0] and close1h[0] < close1h[1]
    can_sell_1h := true
    

table.cell(panel, 0, 0, height=5)


short_trend_ok = can_buy_1m and can_buy_5m and can_buy_15m
if short_trend_ok
    table.cell(panel, 0, 1, "    Short SPY:", text_color=color.yellow, text_size=size.normal)
    table.cell(panel, 1, 1, "GOOD", text_color=color.red, width=10, text_size=size.normal)
      

short_trend_not_ok = can_sell_5m and can_sell_15m
if short_trend_not_ok
    table.cell(panel, 0, 1, "    Short SPY:", text_color=color.yellow, text_size=size.normal)
    table.cell(panel, 1, 1, "BAD", text_color=color.green, width=10, text_size=size.normal)
    
long_trend_ok = can_buy_1m and can_buy_5m and can_buy_1h
if long_trend_ok
    table.cell(panel, 0, 2, "   Long SPY:", text_color=color.yellow,text_size=size.normal)
    table.cell(panel, 1, 2, "GOOD", text_color=color.red, width=10, text_size=size.normal)
    
long_trend_not_ok = can_sell_5m and can_sell_1h
if long_trend_not_ok
    table.cell(panel, 0, 2, "   Long SPY:", text_color=color.yellow, text_size=size.normal)
    table.cell(panel, 1, 2, "BAD", text_color=color.green, width=10, text_size=size.normal)
    
alertcondition(short_trend_ok, title='Short SPY Good', message='SHORT SPY IS GOOD')
alertcondition(short_trend_not_ok, title='Short SPY Bad', message='SHORT SPY IS BAD')

alertcondition(short_trend_ok, title='Long SPY Good', message='LONG SPY IS GOOD')
alertcondition(short_trend_not_ok, title='Long SPY Bad', message='LONG SPY IS BAD')


