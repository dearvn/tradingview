//@version=5
indicator("SnagProfit Logic 1M 5M", overlay = true)


stockschart = syminfo.type == 'stock' or syminfo.type == 'fund'
futureschart = syminfo.type == 'futures'
indexchart = syminfo.type == 'index'
// // --------- This ensures that no plots from lower time frames will be plotted on higher time frames.
// ————— Converts current chart resolution into a float minutes value.
f_resInMinutes() =>
    if stockschart or futureschart or indexchart
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 16 : timeframe.isweekly ? 60. * 7 * 5 : timeframe.ismonthly ? 60. * 7 * 21 : na)
        _resInMinutes
    else
        _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)
        _resInMinutes
// ————— Returns the float minutes value of the string _res.
f_tfResInMinutes(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    // Dependency: f_resInMinutes().
    request.security(syminfo.tickerid, _res, f_resInMinutes())

f_tfSources(_res, _source) =>
    request.security(syminfo.tickerid, _res, _source)

f_tfUp(_TF_High, _TF_Vol, _TF_VolMA) =>
    _TF_High[3] > _TF_High[4] and _TF_High[4] > _TF_High[5] and _TF_High[2] < _TF_High[3] and _TF_High[1] < _TF_High[2] and _TF_Vol[3] > _TF_VolMA[3]

f_tfDown(_TF_Low, _TF_Vol, _TF_VolMA) =>
    _TF_Low[3] < _TF_Low[4] and _TF_Low[4] < _TF_Low[5] and _TF_Low[2] > _TF_Low[3] and _TF_Low[1] > _TF_Low[2] and _TF_Vol[3] > _TF_VolMA[3]

f_RoundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor
    
f_nDecimals(_in) =>
    n  = int(na), s = str.tostring(_in), p = str.pos(s, ".")
    n := na(str.tonumber(s)) ? int(na) : na(p) ? 0 :
     str.length(str.substring(s, p + 1))

_n = f_nDecimals(close)

var string GP2 = "Display"
string  i_tableYpos = input.string("top", "Panel position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input.string("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
color   i_c_buy    = input.color(color.new(color.green, 30), "Buy", inline = "12", group = GP2)
color   i_c_sell    = input.color(color.new(color.red, 10), "Sell", inline = "12", group = GP2)
color   i_c_neutral = input.color(color.new(color.gray, 30), "Neutral", inline = "12", group = GP2)


var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 6, 10)
if barstate.islast
    // Table header.
    table.cell(panel, 0, 2, "TF", bgcolor = i_c_neutral, text_color=color.white, width=4)
    table.cell(panel, 1, 2, "TYPE", bgcolor = i_c_neutral, text_color=color.white, width=4)
    table.cell(panel, 2, 2, "RSI", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 3, 2, "S", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 4, 2, "R", bgcolor = i_c_neutral, text_color=color.white, width=6)
    table.cell(panel, 5, 2, "%V", bgcolor = i_c_neutral, text_color=color.white, width=6)
    
//1m
tf1m = '1'
tf1m_InMinutes = f_tfResInMinutes(tf1m)
currentTFInMinutes = f_resInMinutes()
chartOnLower_tf1m = currentTFInMinutes <= tf1m_InMinutes

tf1m_inH = str.tostring(tf1m_InMinutes / 60)
tf1m_text = if stockschart or futureschart
    tf1m_InMinutes >= 60 and tf1m_InMinutes < 960 ? tf1m_inH + 'h' : tf1m_InMinutes < 60 ? tf1m + 'm' : tf1m
else
    tf1m_InMinutes >= 60 and tf1m_InMinutes < 1440 ? tf1m_inH + 'h' : tf1m_InMinutes < 60 ? tf1m + 'm' : tf1m

barsin_tf1m = tf1m_InMinutes / currentTFInMinutes

tf1m_bar_index = math.ceil(1 * barsin_tf1m)

tf1m_bar_index_range = math.ceil(3 * barsin_tf1m)

var int tf1m_High_index = na
var int tf1m_Low_index = na

if tf1m_bar_index + tf1m_bar_index_range > 4999
    tf1m_High_index := 4999
    tf1m_Low_index := 4999
else
    tf1m_High_index :=  math.abs(ta.highestbars(high, nz(tf1m_bar_index_range, 1)))[tf1m_bar_index] + tf1m_bar_index
    tf1m_Low_index := math.abs(ta.lowestbars(low, nz(tf1m_bar_index_range, 1)))[tf1m_bar_index] + tf1m_bar_index


// S/R  = Time Frame 1 = tf1m
tf1m_Vol = f_tfSources(tf1m, volume)
tf1m_VolMA = ta.sma(tf1m_Vol, 5)
tf1m_High = f_tfSources(tf1m, high)
tf1m_Low = f_tfSources(tf1m, low)
tf1m_Open = f_tfSources(tf1m, open)
tf1m_Close = f_tfSources(tf1m, close)

tf1m_Up = f_tfUp(tf1m_High, tf1m_Vol, tf1m_VolMA)
tf1m_Down = f_tfDown(tf1m_Low, tf1m_Vol, tf1m_VolMA)

tf1m_CalcFractalUp() =>
    tf1m_FractalUp = 0.0
    tf1m_FractalUp := tf1m_Up ? tf1m_High[3] : tf1m_FractalUp[1]
    tf1m_FractalUp

tf1m_CalcFractalDown() =>
    tf1m_FractalDown = 0.0
    tf1m_FractalDown := tf1m_Down ? tf1m_Low[3] : tf1m_FractalDown[1]
    tf1m_FractalDown

tf1m_CalcFractalUpZone() =>
    tf1m_FractalUpZone = 0.0
    tf1m_FractalUpZone := tf1m_Up and tf1m_Close[3] >= tf1m_Open[3] ? tf1m_Close[3] : tf1m_Up and tf1m_Close[3] < tf1m_Open[3] ? tf1m_Open[3] : tf1m_FractalUpZone[1]
    tf1m_FractalUpZone

tf1m_CalcFractalDownZone() =>
    tf1m_FractalDownZone = 0.0
    tf1m_FractalDownZone := tf1m_Down and tf1m_Close[3] >= tf1m_Open[3] ? tf1m_Open[3] : tf1m_Down and tf1m_Close[3] < tf1m_Open[3] ? tf1m_Close[3] : tf1m_FractalDownZone[1]
    tf1m_FractalDownZone

tf1m_ResistanceUp = request.security(syminfo.tickerid, tf1m, tf1m_CalcFractalUp())
tf1m_ResistanceZone = request.security(syminfo.tickerid, tf1m, tf1m_CalcFractalUpZone())

tf1m_SupportDown = request.security(syminfo.tickerid, tf1m, tf1m_CalcFractalDown())
tf1m_SupportZone = request.security(syminfo.tickerid, tf1m, tf1m_CalcFractalDownZone())


ema_1m_5 = ta.ema(close, 5)
ema1m_5 = request.security(syminfo.tickerid, tf1m, ema_1m_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_1m_10 = ta.ema(close, 10)
ema1m_10 = request.security(syminfo.tickerid, tf1m, ema_1m_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_1m_20 = ta.ema(close, 20)
ema1m_20 = request.security(syminfo.tickerid, tf1m, ema_1m_20, barmerge.gaps_off, barmerge.lookahead_on)
rsi_1m = ta.rsi(close, 14)
rsi1m = request.security(syminfo.tickerid, tf1m, rsi_1m, barmerge.gaps_off, barmerge.lookahead_on)
vol1m = request.security(syminfo.tickerid, tf1m, volume, barmerge.gaps_off, barmerge.lookahead_on)
vol1m_change = f_RoundUp((vol1m[0] - vol1m[1])/vol1m[1]*100, 2)

sup1m = f_RoundUp((tf1m_SupportDown[0] + tf1m_SupportZone[0])/2, _n)
res1m = f_RoundUp((tf1m_ResistanceUp[0] + tf1m_ResistanceZone[0])/2, _n)

txt_color_1m = vol1m_change > 0 ? color.white : color.yellow

can_buy_1m = ema1m_5 > ema1m_10 and ema1m_10 > ema1m_20 and (open > ema1m_5 or close > ema1m_5)
sell_lbl_1m = ''
if ema1m_5 < ema1m_10
    sell_lbl_1m := 'N-SELL'
else if ema1m_5 < ema1m_10 and ema1m_10 < ema1m_20 and (open < ema1m_5 or close < ema1m_5)
    sell_lbl_1m := 'B-SELL'    

if can_buy_1m
    if barstate.islast
        table.cell(panel, 0, 3, "1M", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 1, 3, "BUY", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 2, 3, str.format("{0}", rsi1m[0]), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 3, 3, str.tostring(sup1m), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 4, 3, str.tostring(res1m), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 5, 3, str.tostring(vol1m_change)+"%", bgcolor = i_c_buy, text_color=txt_color_1m)
        
        
if (sell_lbl_1m != '')
    if barstate.islast
        table.cell(panel, 0, 3, "1M", bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 1, 3, sell_lbl_1m, bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 2, 3, str.format("{0}", rsi1m[0]), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 3, 3, str.tostring(sup1m), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 4, 3, str.tostring(res1m), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 5, 3, str.tostring(vol1m_change)+"%", bgcolor = i_c_sell, text_color=txt_color_1m)
        
//5m
tf5m = '5'
tf5m_InMinutes = f_tfResInMinutes(tf5m)
chartOnLower_tf5m = currentTFInMinutes <= tf5m_InMinutes

tf5m_inH = str.tostring(tf5m_InMinutes / 60)
tf5m_text = if stockschart or futureschart
    tf5m_InMinutes >= 60 and tf5m_InMinutes < 960 ? tf5m_inH + 'h' : tf5m_InMinutes < 60 ? tf5m + 'm' : tf5m
else
    tf5m_InMinutes >= 60 and tf5m_InMinutes < 1440 ? tf5m_inH + 'h' : tf5m_InMinutes < 60 ? tf5m + 'm' : tf5m

barsin_tf5m = tf5m_InMinutes / currentTFInMinutes

tf5m_bar_index = math.ceil(1 * barsin_tf5m)

tf5m_bar_index_range = math.ceil(3 * barsin_tf5m)

var int tf5m_High_index = na
var int tf5m_Low_index = na

if tf5m_bar_index + tf5m_bar_index_range > 4999
    tf5m_High_index := 4999
    tf5m_Low_index := 4999
else
    tf5m_High_index :=  math.abs(ta.highestbars(high, nz(tf5m_bar_index_range, 1)))[tf5m_bar_index] + tf5m_bar_index
    tf5m_Low_index := math.abs(ta.lowestbars(low, nz(tf5m_bar_index_range, 1)))[tf5m_bar_index] + tf5m_bar_index


// S/R  = Time Frame 1 = tf5m
tf5m_Vol = f_tfSources(tf5m, volume)
tf5m_VolMA = ta.sma(tf5m_Vol, 5)
tf5m_High = f_tfSources(tf5m, high)
tf5m_Low = f_tfSources(tf5m, low)
tf5m_Open = f_tfSources(tf5m, open)
tf5m_Close = f_tfSources(tf5m, close)

tf5m_Up = f_tfUp(tf5m_High, tf5m_Vol, tf5m_VolMA)
tf5m_Down = f_tfDown(tf5m_Low, tf5m_Vol, tf5m_VolMA)

tf5m_CalcFractalUp() =>
    tf5m_FractalUp = 0.0
    tf5m_FractalUp := tf5m_Up ? tf5m_High[3] : tf5m_FractalUp[1]
    tf5m_FractalUp

tf5m_CalcFractalDown() =>
    tf5m_FractalDown = 0.0
    tf5m_FractalDown := tf5m_Down ? tf5m_Low[3] : tf5m_FractalDown[1]
    tf5m_FractalDown

tf5m_CalcFractalUpZone() =>
    tf5m_FractalUpZone = 0.0
    tf5m_FractalUpZone := tf5m_Up and tf5m_Close[3] >= tf5m_Open[3] ? tf5m_Close[3] : tf5m_Up and tf5m_Close[3] < tf5m_Open[3] ? tf5m_Open[3] : tf5m_FractalUpZone[1]
    tf5m_FractalUpZone

tf5m_CalcFractalDownZone() =>
    tf5m_FractalDownZone = 0.0
    tf5m_FractalDownZone := tf5m_Down and tf5m_Close[3] >= tf5m_Open[3] ? tf5m_Open[3] : tf5m_Down and tf5m_Close[3] < tf5m_Open[3] ? tf5m_Close[3] : tf5m_FractalDownZone[1]
    tf5m_FractalDownZone

tf5m_ResistanceUp = request.security(syminfo.tickerid, tf5m, tf5m_CalcFractalUp())
tf5m_ResistanceZone = request.security(syminfo.tickerid, tf5m, tf5m_CalcFractalUpZone())

tf5m_SupportDown = request.security(syminfo.tickerid, tf5m, tf5m_CalcFractalDown())
tf5m_SupportZone = request.security(syminfo.tickerid, tf5m, tf5m_CalcFractalDownZone())

ema_5m_5 = ta.ema(close, 5)
ema5m_5 = request.security(syminfo.tickerid, tf5m, ema_5m_5, barmerge.gaps_off, barmerge.lookahead_on)
ema_5m_10 = ta.ema(close, 10)
ema5m_10 = request.security(syminfo.tickerid, tf5m, ema_5m_10, barmerge.gaps_off, barmerge.lookahead_on)
ema_5m_20 = ta.ema(close, 20)
ema5m_20 = request.security(syminfo.tickerid, tf5m, ema_5m_20, barmerge.gaps_off, barmerge.lookahead_on)
rsi_5m = ta.rsi(close, 14)
rsi5m = request.security(syminfo.tickerid, tf5m, rsi_5m, barmerge.gaps_off, barmerge.lookahead_on)
vol5m = request.security(syminfo.tickerid, tf5m, volume, barmerge.gaps_off, barmerge.lookahead_on)
vol5m_change = f_RoundUp((vol5m[0] - vol5m[1])/vol5m[1]*100, 2)

sup5m = f_RoundUp((tf5m_SupportDown[0] + tf5m_SupportZone[0])/2, _n)
res5m = f_RoundUp((tf5m_ResistanceUp[0] + tf5m_ResistanceZone[0])/2, _n)


txt_color_5m = vol5m_change > 0 ? color.white : color.yellow
can_buy_5m = ema5m_5 > ema5m_10 and ema5m_10 > ema5m_20 and (open > ema5m_5 or close > ema5m_5)

sell_lbl_5m = ''
if ema5m_5 < ema5m_10
    sell_lbl_5m := 'N-SELL'
else if ema5m_5 < ema5m_10 and ema5m_10 < ema5m_20 and (open < ema5m_5 or close < ema5m_5)
    sell_lbl_5m := 'B-SELL'
    
if can_buy_5m
    if barstate.islast
        table.cell(panel, 0, 4, "5M", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 1, 4, "BUY", bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 2, 4, str.format("{0}", rsi5m[0]), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 3, 4, str.tostring(sup5m), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 4, 4, str.tostring(res5m), bgcolor = i_c_buy, text_color=color.white)
        table.cell(panel, 5, 4, str.tostring(vol5m_change)+"%", bgcolor = i_c_buy, text_color=txt_color_5m)
        
if (sell_lbl_5m != '')
    if barstate.islast
        table.cell(panel, 0, 4, "5M", bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 1, 4, sell_lbl_5m, bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 2, 4, str.format("{0}", rsi5m[0]), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 3, 4, str.tostring(sup5m), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 4, 4, str.tostring(res5m), bgcolor = i_c_sell, text_color=color.white)
        table.cell(panel, 5, 4, str.tostring(vol5m_change)+"%", bgcolor = i_c_sell, text_color=txt_color_5m)
        
table.cell(panel, 0, 0, height=32)



